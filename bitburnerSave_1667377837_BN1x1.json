{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":174,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":121651.10000004264,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"hacking_exp\":1,\"strength_exp\":1,\"defense_exp\":1,\"dexterity_exp\":1,\"agility_exp\":1,\"charisma_exp\":1,\"company_rep\":1,\"faction_rep\":1,\"crime_money\":1,\"crime_success\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"work_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":10689352.10372676,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":9,\"level\":200,\"moneyGainRatePerSecond\":6114.206141781902,\"onlineTimeSeconds\":21466.200000041656,\"ram\":64,\"totalMoneyGenerated\":19382044.38823746,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":200,\"moneyGainRatePerSecond\":5677.477131654623,\"onlineTimeSeconds\":20136.200000036828,\"ram\":64,\"totalMoneyGenerated\":15735026.78318795,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":7,\"level\":200,\"moneyGainRatePerSecond\":5240.748121527345,\"onlineTimeSeconds\":19815.40000003568,\"ram\":64,\"totalMoneyGenerated\":13361269.190194445,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":17406.80000002804,\"ram\":64,\"totalMoneyGenerated\":10513228.849094775,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":17085.00000002686,\"ram\":32,\"totalMoneyGenerated\":4553192.947225643,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":15448.00000002133,\"ram\":32,\"totalMoneyGenerated\":4150650.9585516048,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":15448.00000002133,\"ram\":32,\"totalMoneyGenerated\":3895873.990382741,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":15448.00000002133,\"ram\":32,\"totalMoneyGenerated\":3702022.0856498615,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":15448.00000002133,\"ram\":32,\"totalMoneyGenerated\":3595067.971010656,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":15448.00000002133,\"ram\":32,\"totalMoneyGenerated\":3344312.419986533,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":200,\"moneyGainRatePerSecond\":1452.5157421836095,\"onlineTimeSeconds\":11966.20000000884,\"ram\":32,\"totalMoneyGenerated\":2779779.131325003,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":1307.2641679652486,\"onlineTimeSeconds\":5398.399999997283,\"ram\":32,\"totalMoneyGenerated\":1589952.2083504808,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":198,\"moneyGainRatePerSecond\":746.3679041000869,\"onlineTimeSeconds\":3006.399999999457,\"ram\":16,\"totalMoneyGenerated\":836868.1798612198,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":186,\"moneyGainRatePerSecond\":545.3260444098278,\"onlineTimeSeconds\":3006.399999999457,\"ram\":16,\"totalMoneyGenerated\":743687.1190967947,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":169,\"moneyGainRatePerSecond\":322.5227931113263,\"onlineTimeSeconds\":3006.399999999457,\"ram\":8,\"totalMoneyGenerated\":654040.2867040046,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":165,\"moneyGainRatePerSecond\":314.88911753472684,\"onlineTimeSeconds\":3006.399999999457,\"ram\":8,\"totalMoneyGenerated\":640086.639531649,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":165,\"moneyGainRatePerSecond\":314.88911753472684,\"onlineTimeSeconds\":2774.199999999668,\"ram\":8,\"totalMoneyGenerated\":617370.4228356816,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1667377836404,\"lastSave\":1667377781808,\"totalPlaytime\":23759600,\"playtimeSinceLastAug\":23759600,\"playtimeSinceLastBitnode\":23759600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1637952,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":547179923.1213957,\"hacknet\":90094473.57124943,\"hacknet_expenses\":-624948122.5889019,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10688322.103726761,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1637952,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":547179923.1213957,\"hacknet\":90094473.57124943,\"hacknet_expenses\":-624948122.5889019,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10688322.103726761,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":547176114,\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1667354083240},{\"ID\":\"NS2\",\"unlockedOn\":1667354323244},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1667356423452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1667364838340},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1667368974541},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1667370254767},{\"ID\":\"WORKOUT\",\"unlockedOn\":1667375933812}],\"terminalCommandHistory\":[\"home\",\"run init2.js\",\"connect sigma-cosmetics\",\"tree\",\"home\",\"run init2.js\",\"connect sigma-cosmetics\",\"free\",\"home\",\"run init2.js\",\"goto max-hardware\",\"free\",\"mem main.js\",\"mem init1.js\",\"mem init2.js\",\"mem init3.js\",\"run init2.js\",\"tree\",\"run init2.js\",\"tree\",\"analyze\",\"home\",\"run init2.js\",\"mem grower.js\",\"goto joesgums\",\"goto joesguns\",\"tree\",\"mem grower.js\",\"home\",\"run init2.js\",\"goto phantasy\",\"analyze\",\"home\",\"mem test.js\",\"tree\",\"analyze\",\"weaken\",\"run init2.js\",\"goto phantacy\",\"goto phantasy\",\"analyze\",\"tree\",\"home\",\"tree\",\"goto phantasy\",\"analyze\",\"free\",\"analyze\",\"home\",\"run info.js phantasy\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1282,\"factionWorkType\":\"HACKING\",\"factionName\":\"Netburners\"}},\"identifier\":\"1035c8878ee5c2\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"20.3.2.7\",\"isConnectedTo\":true,\"maxRam\":8,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":11050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///1fcd87ed-ed43-4846-89e2-5d88f8b3783e\",\"moduleSequenceNumber\":2946}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///7ddc3da2-66e8-438a-a450-97d55fd2b89a\",\"moduleSequenceNumber\":3040}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"init1.js\",\"url\":\"blob:file:///8ce1ea79-e495-4eb3-892e-8a0c3166d37e\",\"moduleSequenceNumber\":2941}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///206e2e70-086f-45ac-bee8-ae9cd7488657\",\"moduleSequenceNumber\":14746},{\"filename\":\"init1.js\",\"url\":\"blob:file:///b4afd892-9729-4496-98a6-9f58eaf6c570\",\"moduleSequenceNumber\":985},{\"filename\":\"init2.js\",\"url\":\"blob:file:///9613dac6-033e-461b-8a33-15f44a58c7a5\",\"moduleSequenceNumber\":14747}],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///84fd47b2-65ec-4ecc-b7d9-4b8b1747c9c9\",\"moduleSequenceNumber\":981},{\"filename\":\"init3.js\",\"url\":\"blob:file:///340842e8-c221-4930-a2c6-b6749305748c\",\"moduleSequenceNumber\":2942}],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///39fc65d5-8090-404e-a398-e6bf97f6c960\",\"moduleSequenceNumber\":981},{\"filename\":\"main.js\",\"url\":\"blob:file:///89463ab3-b59b-4c9e-a41e-aaa2fb704493\",\"moduleSequenceNumber\":2943}],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///4a6da130-0ef3-414c-b50a-a198ec42ee6e\",\"moduleSequenceNumber\":11050},{\"filename\":\"tree.js\",\"url\":\"blob:file:///6ea20504-d06a-4056-8045-9027e9577a99\",\"moduleSequenceNumber\":11120}],\"dependents\":[],\"ramUsage\":4.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":11120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///e2488f54-ae83-4fcf-8fd9-f743e425d9c3\",\"moduleSequenceNumber\":11050},{\"filename\":\"goto.js\",\"url\":\"blob:file:///928fb5c8-bab3-4a50-ba7e-ea3f024d1c1e\",\"moduleSequenceNumber\":19943}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":19943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///42e54485-8ba9-496d-b57a-a3d727d39fd5\",\"moduleSequenceNumber\":5547},{\"filename\":\"test.js\",\"url\":\"blob:file:///fa362ffb-83ac-43ab-bc06-34268b699e1a\",\"moduleSequenceNumber\":6530}],\"dependents\":[],\"ramUsage\":26.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///e41481e1-1c07-4a7c-895a-05ab81684db8\",\"moduleSequenceNumber\":5914}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///ae2f6d3f-4fe3-488b-9fda-b39070113b7a\",\"moduleSequenceNumber\":11050},{\"filename\":\"info.js\",\"url\":\"blob:file:///dcec1c9c-3ecd-4e79-890a-03919d726866\",\"moduleSequenceNumber\":34301}],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":34301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"87.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":995}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":997}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":999}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1000}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1001}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1002}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1004}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":11116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":34297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45293099897,\"moneyMax\":1132327497425,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1203,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"4.2.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1009}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1011}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1013}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1014}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1015}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1016}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1017}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1018}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":11118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":34299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47656281317,\"moneyMax\":1191407032925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1204,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1023}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1025}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1027}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1028}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1029}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1030}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1031}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1032}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":11112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":34293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":17615019827,\"moneyMax\":440375495675,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":935,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"42.7.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1037}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1039}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1041}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1042}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1043}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1044}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1045}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1046}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":11113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":34294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":26087978183,\"moneyMax\":652199454575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1139,\"serverGrowth\":68}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"94.0.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1051}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1053}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1055}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1056}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1057}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1058}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1060}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":11111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":34292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33978792835,\"moneyMax\":849469820875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1094,\"serverGrowth\":71}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"94.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1065}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1067}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1069}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1070}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1071}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1072}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1074}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":11114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":34295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":21909021240,\"moneyMax\":547725531000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1013,\"serverGrowth\":52}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"22.8.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1079}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1081}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1083}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1084}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1085}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1086}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1087}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1088}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":11108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":34289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":14043470397,\"moneyMax\":351086759925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":993,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"49.6.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1093}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1097}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1098}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1099}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":11107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":1106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":34288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":15919868992,\"moneyMax\":397996724800,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1021,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"39.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1114}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":11109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":34290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26087047300,\"moneyMax\":652176182500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1065,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"79.2.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1121}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1123}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1128}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1129}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1130}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":11104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":34285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":1492298416,\"moneyMax\":37307460400,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1173,\"serverGrowth\":84}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"69.7.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1135}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1139}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1140}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1141}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1143}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1144}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":11119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":34300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1216,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"96.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1151}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1156}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1157}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1158}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":11106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":1162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":34287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1144616059,\"moneyMax\":28615401475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1062,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"70.5.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1165}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1167}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1168}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":11091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":1176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":34272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":939374716,\"moneyMax\":23484367900,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":888,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"70.3.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1177}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1179}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1181}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1183}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":11097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":1190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":34278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":737521282,\"moneyMax\":18438032050,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":919,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"21.6.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1198}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":11103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":1204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":34284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":744490548,\"moneyMax\":18612263700,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":831,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"86.0.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":11105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":1218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":34286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":752194478,\"moneyMax\":18804861950,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":886,\"serverGrowth\":64}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"78.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1221}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1223}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1224}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1225}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1227}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1228}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":11093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":34274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":960761543,\"moneyMax\":24019038575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":920,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"88.3.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1233}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1235}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1237}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1238}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1239}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1241}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1242}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":11090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":34271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1138983924,\"moneyMax\":28474598100,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":808,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"82.8.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1249}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1251}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":11101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":34282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":753726963,\"moneyMax\":18843174075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":869,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"21.5.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1261}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1263}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1265}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1266}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1268}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":11102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":1274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":34283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":557859657,\"moneyMax\":13946491425,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":804,\"serverGrowth\":87}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"98.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1283}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":11095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":34276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":848113997,\"moneyMax\":21202849925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":870,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"88.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1294}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1298}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":11084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":34265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":765718397,\"moneyMax\":19142959925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":827,\"serverGrowth\":89}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"22.5.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1303}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1308}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1309}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":11086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":34267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1034817855,\"moneyMax\":25870446375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":896,\"serverGrowth\":63}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"46.8.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1324}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":11087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":1330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":34268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":955085163,\"moneyMax\":23877129075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":872,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"52.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1333}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1335}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1339}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":11096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":1344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":34277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":963583090,\"moneyMax\":24089577250,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":788,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"84.2.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1350}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1354}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":11099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":34280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":706411674,\"moneyMax\":17660291850,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":808,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-184735.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[80,[1,2,6,7,10,12,17,18,19,21,22,23]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"72.6.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1363}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1365}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1368}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":11092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":1372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":34273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":870479269,\"moneyMax\":21761981725,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":831,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"69.3.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1379}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":11088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":1386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":34269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1527648485,\"moneyMax\":38191212125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":889,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"54.1.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1393}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1394}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1395}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":11083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":34264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1628045917,\"moneyMax\":40701147925,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":764,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"41.0.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1403}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1405}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1408}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":11098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":1414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":34279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1161088695,\"moneyMax\":29027217375,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":812,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"92.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1415}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":11094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":34275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1386063870,\"moneyMax\":34651596750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":807,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"22.6.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1433}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1434}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1435}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":11089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":1442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":34270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1045997765,\"moneyMax\":26149944125,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":798,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"4.1.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1443}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1448}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1449}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":11079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":34260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":773078239,\"moneyMax\":19326955975,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":743,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"72.4.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1459}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1464}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1465}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":11078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":34259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":667615911,\"moneyMax\":16690397775,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":493,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805028.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"2kx618eO5XgUl4999de8eQKM5W06421Rtr187816lsqN243Owt919jlV4YRtt6\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"38.5.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1475}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1478}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":11081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":34262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":706112757,\"moneyMax\":17652818925,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":547,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"48.0.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1485}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1489}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1494}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":11082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":34263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":336422051,\"moneyMax\":8410551275,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":450,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"49.6.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1503}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1504}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1508}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":11075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":34256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":189543459,\"moneyMax\":4738586475,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":410,\"serverGrowth\":44}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"67.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1515}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1518}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1519}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":11076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":34257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":982992841,\"moneyMax\":24574821025,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":736,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"68.9.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1529}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1533}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1534}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1535}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1536}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":11073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":34254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":201059849,\"moneyMax\":5026496225,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":450,\"serverGrowth\":40}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"26.5.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1543}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1545}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1546}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1547}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1548}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1549}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":11077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":1554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":34258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":566294136,\"moneyMax\":14157353400,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":633,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"1.3.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1555}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1557}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1559}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1561}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1563}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1564}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":11074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":1568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":34255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":388056143,\"moneyMax\":9701403575,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":401,\"serverGrowth\":29}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"25.4.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1569}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///022b30de-6ca8-4a7f-819e-5a65a93589d8\",\"moduleSequenceNumber\":2948}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":2948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1573}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1574}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1575}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":11069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///5a006028-60e0-40b1-84ea-830b4e0696fb\",\"moduleSequenceNumber\":2951}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":2951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///b085b718-a5d9-4ea7-842c-7ef3a1087949\",\"moduleSequenceNumber\":9072}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":9072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":34250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":175844121,\"moneyMax\":4396103025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":297,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312024.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,6],[3,5,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"5.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1583}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1585}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1587}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1588}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1589}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":11070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":1596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":34251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":233962340,\"moneyMax\":5849058500,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":311,\"serverGrowth\":65}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"9.7.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1597}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1601}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1604}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1605}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1606}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":11071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":1610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":34252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":388,\"serverGrowth\":57}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"68.5.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1613}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1615}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1616}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1618}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1619}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1620}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":11066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":34247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":78697955,\"moneyMax\":1967448875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":259,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"69.8.4.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///7c3fbaa5-74ca-4976-92b9-5cdace3b9ef2\",\"moduleSequenceNumber\":2974}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":2974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1633}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1634}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":11051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":1636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///5bcf6b66-1940-44fa-9e5a-9a2fd06d4953\",\"moduleSequenceNumber\":9087}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":9087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///a422fa06-eff5-42e3-bd9b-0daaecb66295\",\"moduleSequenceNumber\":9088}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":9088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":34232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"83.7.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///4a73ee08-a746-4691-8096-8f15d9fa06aa\",\"moduleSequenceNumber\":2972}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///207f8d9f-23cc-4377-ab2c-01047bc323da\",\"moduleSequenceNumber\":1649},{\"filename\":\"hack.js\",\"url\":\"blob:file:///2127ac6a-deb9-4b9f-ab39-909175a573d7\",\"moduleSequenceNumber\":2944}],\"dependents\":[],\"ramUsage\":11.05,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1643}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1644}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///01b97fe2-0038-4726-ae90-b26866482504\",\"moduleSequenceNumber\":2736},{\"filename\":\"node.js\",\"url\":\"blob:file:///edf6bf4c-c00d-43bf-b66f-852e543bf612\",\"moduleSequenceNumber\":2811}],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":11052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///b58ebe7d-eda9-47f8-aed2-25d41191405d\",\"moduleSequenceNumber\":13081}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":13081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///48d7a8a1-bc49-46c4-aea3-ad4d5014d719\",\"moduleSequenceNumber\":13082}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":13082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":34233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.007999999999999,\"minDifficulty\":3,\"moneyAvailable\":2164594.29918312,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"35.1.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///553cccab-3394-4adf-9bed-cb0ddc1c8940\",\"moduleSequenceNumber\":2969}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1655}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1658}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///ec4a5fd8-2db3-470d-b263-498d01406724\",\"moduleSequenceNumber\":1663},{\"filename\":\"node.js\",\"url\":\"blob:file:///94e8fc03-b630-4b44-a419-c55b8df2b047\",\"moduleSequenceNumber\":2945}],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///3fac515c-2e3e-4e0b-bf1b-c541f1c342a5\",\"moduleSequenceNumber\":1663},{\"filename\":\"tree.js\",\"url\":\"blob:file:///90a4230e-834d-455b-99c1-96a62a55f3f1\",\"moduleSequenceNumber\":4992}],\"dependents\":[],\"ramUsage\":4.55,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///40a6e480-c984-4c4d-9c79-ddd2ed572a28\",\"moduleSequenceNumber\":2975}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///08e77041-6713-4ea5-8f58-627e61484915\",\"moduleSequenceNumber\":9083}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":9083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":34234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"14.7.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///90f7fd08-73c5-4ab1-b10f-442563e0d0b9\",\"moduleSequenceNumber\":2966}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":2966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///3b5dda4c-5a34-4012-9371-75e5c3657999\",\"moduleSequenceNumber\":1558},{\"filename\":\"hack.js\",\"url\":\"blob:file:///b2c00ef6-6449-4305-b4b4-5de74e6431c6\",\"moduleSequenceNumber\":2879}],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1673}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1674}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":11054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":1678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///11c62405-2575-4d5e-bd82-2114e2d140e4\",\"moduleSequenceNumber\":9081}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":9081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///3b9522c4-b864-44a6-a2a4-177dc8cf6326\",\"moduleSequenceNumber\":9085}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":9085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":34235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"43.7.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///07973b91-aff7-40d2-9dbd-2839f15a3500\",\"moduleSequenceNumber\":2956}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":2956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1683}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1685}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1686}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":11058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///3da942a5-2910-4c44-a26a-421d383d68cf\",\"moduleSequenceNumber\":2957}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":2957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///db37cc7c-3619-4d91-8b9d-f2c99f60b310\",\"moduleSequenceNumber\":9075}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":9075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":34239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"39.6.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1695}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///af08df6d-13f4-4fc0-9532-daf0058a8331\",\"moduleSequenceNumber\":2967}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1697}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1699}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1700}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1702}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1703}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1704}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":11060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///c0f89aea-9048-4d1c-9350-b45e1debd10e\",\"moduleSequenceNumber\":2962}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///48e81864-b165-4b6d-be51-4e1aee43ac1c\",\"moduleSequenceNumber\":9080}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":9080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":34241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-611782.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"LjDZ5Z5Z56QnQiG1Z56QiG1QZ56QiG1QNoG1oG1oMbfSG1oMbfVfWsZIbAvZIbAvZIbAQbAvZIbAQnyzGFIbAQnyz\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"58.7.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1709}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///7ed21bfd-cb79-4c82-8a1b-50ada1f19b74\",\"moduleSequenceNumber\":2954}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":2954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1711}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1713}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1714}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1715}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1716}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1717}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1718}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":11062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///58b6e6f5-aaac-4712-8e66-5306808bbdb5\",\"moduleSequenceNumber\":2961}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":2961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///e97fab6f-a8de-46d4-b605-094826f3dbb6\",\"moduleSequenceNumber\":9076}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":9076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":34243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"80.9.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1723}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///84a7e785-bfc9-4cc3-a546-15e3a082fb39\",\"moduleSequenceNumber\":2950}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1725}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1727}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1728}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1729}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":11065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///7bab240e-b984-41ea-979d-eb1a7e7db6ed\",\"moduleSequenceNumber\":2949}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///7d4c366a-e776-48f1-93cf-fc0d4b84d5a2\",\"moduleSequenceNumber\":9071}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":9071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":34246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"51.9.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1737}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///4d54c639-5cab-4b4b-ba45-8c6a34562d3e\",\"moduleSequenceNumber\":2964}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1739}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1741}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1743}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1744}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1745}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1746}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":11055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///3461e969-915b-4b49-a2e3-ad2c1cd3c098\",\"moduleSequenceNumber\":2965}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///6bd70104-f304-467d-945e-d45687f058b5\",\"moduleSequenceNumber\":9082}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":9082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":34236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"38.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///7690a2b9-7d1e-4b70-a359-00993deb523a\",\"moduleSequenceNumber\":2963}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1753}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1756}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1757}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1758}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":11056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///f2a28460-c06d-4167-a65e-9967f9166c93\",\"moduleSequenceNumber\":2968}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///813ad295-d547-4743-8c8a-093d2898e061\",\"moduleSequenceNumber\":9084}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":9084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":34237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"34.4.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1765}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///a4ec05b9-ffde-4554-9c92-8a40d34c0184\",\"moduleSequenceNumber\":2952}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":2952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1767}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"tool.js\",\"url\":\"blob:file:///49c08c78-a94d-482e-959a-4b8fa1e5db72\",\"moduleSequenceNumber\":1775},{\"filename\":\"init1.js\",\"url\":\"blob:file:///aa7d5e1a-c4ea-44a0-823b-7da4c6a7ea66\",\"moduleSequenceNumber\":1768},{\"filename\":\"init2.js\",\"url\":\"blob:file:///d8986f77-94f4-408f-9b11-e507ea7f849d\",\"moduleSequenceNumber\":2941}],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":2941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1770}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1773}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1774}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":11064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///bde86dda-fae8-4287-8ba5-3ff9eb9e09b3\",\"moduleSequenceNumber\":2960}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":2960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///6f03b802-1fee-4d04-aa35-0ce11b69c2c7\",\"moduleSequenceNumber\":9073}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":9073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":34245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"14.0.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1779}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///5511ef08-59be-442e-8b36-d46be265179a\",\"moduleSequenceNumber\":2955}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1781}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1783}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1784}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1785}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1786}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1787}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1788}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":11061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///6e2f7cec-6aba-4199-8c11-db81d3f6aae4\",\"moduleSequenceNumber\":9074}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":9074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///5fc6d1fa-4a64-4e34-b616-72bf67870392\",\"moduleSequenceNumber\":9079}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":9079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":34242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"34.0.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1793}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///762f8354-e279-43a5-8c91-a147b1d7013c\",\"moduleSequenceNumber\":2953}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":2953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1795}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1797}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1798}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1800}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":11063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///eb4a52da-71e8-4c58-8f8d-8c2a5208c845\",\"moduleSequenceNumber\":2971}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":2971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///034d4148-506f-48f0-8366-7e4b7d5d8b40\",\"moduleSequenceNumber\":9078}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":9078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":34244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":60939505,\"moneyMax\":1523487625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":195,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"59.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1807}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1812}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1813}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1814}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1815}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1816}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":11067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":34248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":52890077,\"moneyMax\":1322251925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":232,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"99.2.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1821}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///2a7ff6c1-d136-495a-a03b-46dd5cb16bb3\",\"moduleSequenceNumber\":2958}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1823}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1825}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1826}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1827}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1828}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1829}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1830}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":11057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///70e0835f-611d-4f89-87a9-99a5c30db52d\",\"moduleSequenceNumber\":2959}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///f69cb64d-e135-4a75-add0-bb05aa422965\",\"moduleSequenceNumber\":9077}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":9077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":34238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"73.5.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1835}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1837}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1839}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1840}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1842}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1844}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":11080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":34261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":508,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"70.8.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1853}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1854}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1855}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1856}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1857}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1858}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":11115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":34296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\".\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1040,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-739592-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,1,0,0],[1,1,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,1,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,1],[0,0,0,0,0,1,0],[0,0,0,0,0,1,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"2.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1863}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1865}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1867}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1868}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1869}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1870}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1871}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1872}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":11085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":34266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":718,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"77.9.0.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1877}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1879}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1881}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1882}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1883}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1884}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1885}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1886}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":11100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":34281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":516,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.1.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1891}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1893}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1895}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1896}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1897}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1898}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1899}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1900}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":11072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":34253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":352,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"43.4.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1905}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///d3386dd1-8f1f-4731-9e97-9a1a71412c5f\",\"moduleSequenceNumber\":2946}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1907}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1909}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1910}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1911}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1912}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1913}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1914}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":11068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///29d2ac7e-311e-4988-a466-45fec7048310\",\"moduleSequenceNumber\":2947}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///95a5be32-86ae-48c1-9339-34604a4a43f0\",\"moduleSequenceNumber\":9070}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":9070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":34249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32569.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[38,83,137,65,163,24,65,98,181,122,28,152,133,200,191,11,36]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"15.0.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1919}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1921}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1923}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1924}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1925}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1926}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1927}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1928}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":11110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":34291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":536,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"16.1.8.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1933}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grower.js\",\"url\":\"blob:file:///d45adf3f-500c-40f4-9069-58e353ba67cb\",\"moduleSequenceNumber\":2970}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":2970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1935}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1937}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1938}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1939}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1940}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1941}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1942}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":11059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaker.js\",\"url\":\"blob:file:///b80b0f16-b75d-49bb-8c3c-8a268160493e\",\"moduleSequenceNumber\":2973}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":2973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker.js\",\"url\":\"blob:file:///23e36a2e-8e2a-43d7-a0af-6e529b003287\",\"moduleSequenceNumber\":9086}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":9086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":34240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"95.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { goto } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  goto(ns.args[0])\\n}\",\"filename\":\"goto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1947}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.grow(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"grower.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, gcd, hackAll, money, printHTML } from './tool';\\r\\n\\r\\n/** @typedef {SEEK|WEAK|GROW|HACK} Phase */\\r\\n\\r\\nconst SEEK = 0;\\r\\nconst WEAK = 1;\\r\\nconst GROW = 2;\\r\\nconst HACK = 3;\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  /** @type {string} */\\r\\n  let victim;\\r\\n  /** @type {{name: string, profit: number}} */\\r\\n  let newVictim;\\r\\n  /** @type {Phase} */\\r\\n  let phase = SEEK;\\r\\n  /** @type {number[]} */\\r\\n  let ids = [];\\r\\n\\r\\n  function logId(id) { ids.push(id); }\\r\\n\\r\\n  while (true) {\\r\\n    hackAll(ns);\\r\\n    const hackingLevel = ns.getHackingLevel();\\r\\n    newVictim = {};\\r\\n    for (const host in extra.hacked) {\\r\\n      if (host == 'home' || ns.getServerRequiredHackingLevel(host) > hackingLevel) { continue; }\\r\\n      const securityPerHack = ns.hackAnalyzeSecurity(1, host);\\r\\n      const securityPerWeak = ns.weakenAnalyze(1);\\r\\n      const securtiyPerGrow = ns.growthAnalyzeSecurity(1, host, 1);\\r\\n      const percentPerHack = ns.hackAnalyze(host);\\r\\n      const growNeed = Math.ceil(ns.growthAnalyze(host, 1 / (1 - percentPerHack), 1));\\r\\n      const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n      const profit = percentPerHack * ns.getServerMaxMoney(host) / ns.getWeakenTime(host) / (1 + growNeed + weakNeed);\\r\\n      if (!newVictim.name || newVictim.profit < profit) {\\r\\n        newVictim.name = host;\\r\\n        newVictim.profit = profit;\\r\\n      }\\r\\n    }\\r\\n    if (newVictim.name && victim != newVictim.name) {\\r\\n      victim = newVictim.name;\\r\\n      phase = SEEK;\\r\\n    }\\r\\n    let newPhase = phase;\\r\\n    switch (phase) {\\r\\n      case SEEK: if (victim) {\\r\\n        newPhase = WEAK;\\r\\n      }\\r\\n      case WEAK: if (\\r\\n        ns.getServerSecurityLevel(victim) ==\\r\\n        ns.getServerMinSecurityLevel(victim)) {\\r\\n        newPhase = GROW;\\r\\n      }\\r\\n      case GROW: if (\\r\\n        ns.getServerMoneyAvailable(victim) ==\\r\\n        ns.getServerMaxMoney(victim)) {\\r\\n        newPhase = HACK;\\r\\n      }\\r\\n    }\\r\\n    if (phase != newPhase) {\\r\\n      for (const id of ids) ns.kill(id);\\r\\n      ids = [];\\r\\n      phase = newPhase;\\r\\n      switch (phase) {\\r\\n        case WEAK: {\\r\\n          const currentSecurity = ns.getServerSecurityLevel(victim);\\r\\n          const minSecurity = ns.getServerMinSecurityLevel(victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const weakNeed = Math.ceil((currentSecurity - minSecurity) / securityPerWeak);\\r\\n          addScript({ name: 'weaker.js', n: weakNeed, args: [victim], onRun: logId });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Find new victim `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>weaken</span> with `\\r\\n            + `<span style='color:${theme.money}'>w:${weakNeed}</span>;\\\\nCurrent security: `\\r\\n            + `<span style='color:${theme.money}'>${currentSecurity}</span>, minimal security: `\\r\\n            + `<span style='color:${theme.money}'>${minSecurity}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case GROW: {\\r\\n          const currentMoney = ns.getServerMoneyAvailable(victim);\\r\\n          const maxMoney = ns.getServerMaxMoney(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, maxMoney / currentMoney));\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const growPerGroup = Math.floor(securityPerWeak / securtiyPerGrow);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          const n = Math.ceil(growNeed / growPerGroup);\\r\\n          addScript({\\r\\n            n,\\r\\n            group: [\\r\\n              { name: 'grower.js', n: growPerGroup, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: 1, args: [victim, 500], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete weaken `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>growth</span> with `\\r\\n            + `<span style='color:${theme.money}'>(g:${growPerGroup} w:1):${n}</span>;\\\\nCurrent money: `\\r\\n            + `<span style='color:${theme.money}'>${money(currentMoney)}</span>, maximal money: `\\r\\n            + `<span style='color:${theme.money}'>${money(maxMoney)}</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        } case HACK: {\\r\\n          const securityPerHack = ns.hackAnalyzeSecurity(1, victim);\\r\\n          const securityPerWeak = ns.weakenAnalyze(1);\\r\\n          const securtiyPerGrow = ns.growthAnalyzeSecurity(1, victim, 1);\\r\\n          const percentPerHack = ns.hackAnalyze(victim);\\r\\n          const growNeed = Math.ceil(ns.growthAnalyze(victim, 1 / (1 - percentPerHack), 1));\\r\\n          const weakNeed = Math.ceil((securityPerHack + growNeed * securtiyPerGrow) / securityPerWeak);\\r\\n          const hackTime = ns.getHackTime(victim);\\r\\n          const growTime = ns.getGrowTime(victim);\\r\\n          const weakTime = ns.getWeakenTime(victim);\\r\\n          // const n = Math.ceil((growNeed + weakNeed + 1) / 46);\\r\\n          // const weakPerGroup = Math.ceil(weakNeed / n);\\r\\n          // const growPerGroup = Math.ceil(growNeed / n);\\r\\n          addScript({\\r\\n            n: Infinity,\\r\\n            group: [\\r\\n              { name: 'hacker.js', n: 1, args: [victim, weakTime - hackTime + 500], onRun: logId },\\r\\n              { name: 'grower.js', n: growNeed, args: [victim, weakTime - growTime + 500], onRun: logId },\\r\\n              { name: 'weaker.js', n: weakNeed, args: [victim, 1000], onRun: logId },\\r\\n            ]\\r\\n          });\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.info}'>Complete growth `\\r\\n            + `<span style='color:${theme.money}'>${victim}</span>, start `\\r\\n            + `<span style='color:${theme.money}'>hacking</span> with `\\r\\n            + `<span style='color:${theme.money}'>(h: 1 g:${growNeed} w:${weakNeed}):∞</span>;` +\\r\\n            `</span>`);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    await ns.asleep(1000);\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.95,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1949}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n\\r\\n  printHTML('Setting theme & style;');\\r\\n  ns.ui.setTheme(theme);\\r\\n  ns.ui.setStyles(style);\\r\\n\\r\\n  printHTML('Setting alias: main, tree, goto, test, theme;');\\r\\n  execRaw('alias main=\\\"run main.js\\\"');\\r\\n  execRaw('alias tree=\\\"run tree.js\\\"');\\r\\n  execRaw('alias goto=\\\"run goto.js\\\"');\\r\\n  execRaw('alias test=\\\"run test.js\\\"');\\r\\n  execRaw('alias theme=\\\"run theme.js\\\"');\\r\\n\\r\\n  for (let file of files) {\\r\\n    while (true) {\\r\\n      printHTML(`<span style='color:${theme.secondary}'>Downloading ${file}...</span>`);\\r\\n      if (await ns.wget(root + file, file, 'home')) {\\r\\n        popOutput();\\r\\n        printHTML(`Success download ${file};`);\\r\\n        break;\\r\\n      } else {\\r\\n        popOutput();\\r\\n        printHTML(`<span style='color:${theme.error}'>Fail download ${file}!</span>`);\\r\\n        ns.tail();\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  ns.atExit(() => execRaw('home;run init2.js;'));\\r\\n}\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nconst execRaw = extra.execRaw;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nconst popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nconst printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\nconst root = 'https://githubraw.com/Luna1996/bitburner/master/src/';\\r\\nexport const files = [\\r\\n  'tool.js', 'init2.js', 'init3.js', 'main.js',\\r\\n  'node.js', 'hack.js',\\r\\n  'theme.js', 'tree.js', 'goto.js', 'test.js',\\r\\n  'hacker.js', 'grower.js', 'weaker.js'];\\r\\n/** @type {import('../docs').UserInterfaceTheme} */\\r\\nexport const theme = {\\r\\n  primarylight: '#E0E0BC',\\r\\n  primary: '#CCCCAE',\\r\\n  primarydark: '#B8B89C',\\r\\n  successlight: '#00F000',\\r\\n  success: '#00D200',\\r\\n  successdark: '#00B400',\\r\\n  errorlight: '#F00000',\\r\\n  error: '#C80000',\\r\\n  errordark: '#A00000',\\r\\n  secondarylight: '#B4AEAE',\\r\\n  secondary: '#969090',\\r\\n  secondarydark: '#787272',\\r\\n  warninglight: '#F0F000',\\r\\n  warning: '#C8C800',\\r\\n  warningdark: '#A0A000',\\r\\n  infolight: '#69f',\\r\\n  info: '#36c',\\r\\n  infodark: '#039',\\r\\n  welllight: '#444',\\r\\n  well: '#222',\\r\\n  white: '#fff',\\r\\n  black: '#1E1E1E',\\r\\n  hp: '#dd3434',\\r\\n  money: '#ffd700',\\r\\n  hack: '#adff2f',\\r\\n  combat: '#faffdf',\\r\\n  cha: '#a671d1',\\r\\n  int: '#6495ed',\\r\\n  rep: '#faffdf',\\r\\n  disabled: '#66cfbc',\\r\\n  backgroundprimary: '#1E1E1E',\\r\\n  backgroundsecondary: '#252525',\\r\\n  button: '#333'\\r\\n};\\r\\n/** @type {import('../docs').IStyleSettings} */\\r\\nexport const style = { fontFamily: 'Consolas', lineHeight: 1.2 };\",\"filename\":\"init1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { style, theme } from './init1';\\r\\nimport { execRaw, printHTML, updateTree } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  extra.tree = null;\\r\\n  extra.hacked = {};\\r\\n  extra.scripts = [];\\r\\n  updateTree(ns);\\r\\n  ns.atExit(() => execRaw('home;run init3.js;'));\\r\\n}\",\"filename\":\"init2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1951}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { addScript, execRaw, hackAll } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  hackAll(ns);\\n  addScript({ name: 'node.js' }, { name: 'hack.js' });\\n  ns.atExit(() => execRaw('home;run main.js;'));\\n}\",\"filename\":\"init3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.85,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1952}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML, runScript } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('exec');\\n  printHTML('Start main loop;');\\n  while (true) {\\n    runScript(ns);\\n    await ns.asleep(1000);\\n  }\\n}\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1953}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { tryUpgradeHacknetNode } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  while (true) {\\n    if (tryUpgradeHacknetNode(ns)) continue;\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"node.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1954}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  document\\r\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.95,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1955}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { hexToRgb, popOutput, printHTML, rgbToGray } from './tool';\\n\\n/** @param {import('./tool').NS} ns */\\nexport async function main(ns) {\\n  popOutput();\\n  const theme = ns.ui.getTheme();\\n  const L = 50;\\n  let html = '';\\n  for (const name in theme) {\\n    const bg = theme[name];\\n    const fg = rgbToGray(hexToRgb(bg)) >= 128 ? '#000' : '#fff';\\n    html += `<span style='color:${fg};background-color:${bg};'>`;\\n    html += ` <span style='user-select:text;'>${name}</span> `;\\n    html += `<span style='user-select:text;'>${bg}</span>${' '.repeat(L - name.length - bg.length - 2)}`\\n    html += `</span>\\\\n`;\\n  }\\n  printHTML(`<span style='line-height:1.2;margin:0;user-select:none;'>${html.substring(0, html.length - 2)}</p>`);\\n}\\n\",\"filename\":\"theme.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1956}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @typedef {import('../docs').NS} NS\\r\\n * @typedef {Object.<string, {last: string, next: string[]}>} Tree\\r\\n * @typedef {{r: number, g: number, b: number}} RGB\\r\\n * @typedef {{name: string, n?: number, args?: (string|number|boolean)[], onRun?: (id: number)=>void}} Script\\r\\n * @typedef {{n: number, group: Script[]}} ScriptGroup\\r\\n */\\r\\n\\r\\n/** @type {Tree} */\\r\\nextra.tree = extra.tree ?? null;\\r\\n/** @type {Object.<string, {}>} */\\r\\nextra.hacked = extra.hacked ?? { 'home': {} };\\r\\n/** @type {(Script|ScriptGroup)[]} */\\r\\nextra.scripts = extra.scripts ?? [];\\r\\n\\r\\n/** @param {Script[]|ScriptGroup[]} list */\\r\\nexport function addScript(...list) {\\r\\n  for (const item of list) {\\r\\n    item.n = item.n ?? 1;\\r\\n    if (item.group) {\\r\\n      for (const one of item.group) {\\r\\n        one.n = one.n ?? 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  extra.scripts.push(...list);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function runScript(ns) {\\r\\n  const time = new Date().getTime();\\r\\n  let step = 0;\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let i = extra.scripts.length - 1; i >= 0; i--) {\\r\\n    const item = extra.scripts[i];\\r\\n    if (item.group) {\\r\\n      const answ = fillJobs(ns, item.group);\\r\\n      if (answ) {\\r\\n        item.n--;\\r\\n        if (item.n > 0) {\\r\\n          i++;\\r\\n        } else {\\r\\n          extra.scripts.splice(i, 1);\\r\\n        }\\r\\n        for (const { svrName: host, script: { name, n, args, onRun } } of answ) {\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { ns.tail(); }\\r\\n          if (onRun) onRun(id);\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      /** @type {Script} */\\r\\n      const script = item;\\r\\n      const name = script.name;\\r\\n      const args = script.args;\\r\\n      const ram = ns.getScriptRam(name, 'home');\\r\\n      for (const host in extra.hacked) {\\r\\n        const ramLeft = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\r\\n        if (ramLeft >= ram) {\\r\\n          const n = Math.min(script.n, Math.floor(ramLeft / ram));\\r\\n          const id = ns.exec(name, host, n, `${time}@${step++}`, ...(args ?? []));\\r\\n          if (id == 0) { break; }\\r\\n          if (script.onRun) { script.onRun(id); }\\r\\n          printHTML(\\r\\n            `<span style='color:${theme.secondary}'>`\\r\\n            + `[${id}] `\\r\\n            + `${name}`\\r\\n            + `${n && n != 1 ? ` ${n}` : ''}`\\r\\n            + `${args ? ' ' + args.join(' ') : ''} `\\r\\n            + `@${host}` +\\r\\n            `</span>`);\\r\\n          script.n -= n;\\r\\n          if (script.n == 0) { extra.scripts.splice(i, 1); break; }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {Script[]} scripts\\r\\n * @return {{svrName: string, script: Script}[]}\\r\\n */\\r\\nfunction fillJobs(ns, scripts) {\\r\\n  /** @typedef {{svrName: string, svrRam: number}} Svr */\\r\\n  /** @typedef {{jobName: string, jobRam: number, jobLeft: number}} Job */\\r\\n  /** @typedef {{jobName: string, jobIndex: number, svrNames: string[], svrIndex: number}} Step */\\r\\n\\r\\n  /** @type {Svr[]} */\\r\\n  const svrList = [];\\r\\n  /** @type {Object.<string, Svr>} */\\r\\n  const svrMap = {};\\r\\n  let totalSvrRam = 0;\\r\\n  for (const svrName in extra.hacked) {\\r\\n    const svrRam = ns.getServerMaxRam(svrName) - ns.getServerUsedRam(svrName);\\r\\n    if (svrRam > 0) {\\r\\n      const svr = { svrName, svrRam };\\r\\n      svrList.push(svr);\\r\\n      svrMap[svrName] = svr;\\r\\n      totalSvrRam += svrRam;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Job[]} */\\r\\n  const jobList = [];\\r\\n  /** @type {Object.<string, Job>} */\\r\\n  const jobMap = {};\\r\\n  /** @type {Object.<string, Script>} */\\r\\n  const scriptMap = {};\\r\\n  let totalJobRam = 0;\\r\\n  let totalJobNum = 0;\\r\\n  for (const script of scripts) {\\r\\n    const { name: jobName, n: jobLeft } = script;\\r\\n    scriptMap[jobName] = script;\\r\\n    const jobRam = ns.getScriptRam(jobName, 'home');\\r\\n    const job = { jobName, jobRam, jobLeft }\\r\\n    jobList.push(job);\\r\\n    jobMap[jobName] = job;\\r\\n    totalJobRam += jobRam * jobLeft;\\r\\n    totalJobNum += jobLeft;\\r\\n  }\\r\\n\\r\\n  if (totalSvrRam < totalJobRam) { return; }\\r\\n\\r\\n  jobList.sort((a, b) => b.jobRam - a.jobRam);\\r\\n\\r\\n  let jobIndex = 0;\\r\\n  /** @type {Step[]} */\\r\\n  let steps = [];\\r\\n  while (steps.length < totalJobNum) {\\r\\n    const job = jobList[jobIndex];\\r\\n\\r\\n    /** @type {string[]} */\\r\\n    const svrNames = [];\\r\\n    svrList.sort((a, b) => a.svrRam - b.svrRam);\\r\\n    for (const svr of svrList) {\\r\\n      if (svr.svrRam >= job.jobRam) {\\r\\n        svrNames.push(svr.svrName);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (svrNames.length == 0) {\\r\\n      do {\\r\\n        let step = steps[steps.length - 1];\\r\\n        if (!step) { return; }\\r\\n        const job = jobMap[step.jobName]\\r\\n        svrMap[step.svrNames[step.svrIndex]].svrRam += job.jobRam;\\r\\n        step.svrIndex--;\\r\\n        if (step.svrIndex >= 0) {\\r\\n          jobIndex = step.jobIndex;\\r\\n          svrMap[step.svrNames[step.svrIndex]].svrRam -= job.jobRam;\\r\\n          break;\\r\\n        }\\r\\n        job.jobLeft++;\\r\\n        steps.pop();\\r\\n      } while (true)\\r\\n    } else {\\r\\n      const svrIndex = svrNames.length - 1;\\r\\n      const svr = svrMap[svrNames[svrIndex]];\\r\\n      svr.svrRam -= job.jobRam;\\r\\n      job.jobLeft--;\\r\\n      if (job.jobLeft == 0) jobIndex++;\\r\\n      steps.push({ jobIndex, jobName: job.jobName, svrNames, svrIndex });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @type {Object.<string, Object.<string, number>>} */\\r\\n  const answ = {};\\r\\n  for (const step of steps) {\\r\\n    const svrName = step.svrNames[step.svrIndex];\\r\\n    const jobName = step.jobName;\\r\\n    const svr = svrMap[svrName];\\r\\n    svr.svrRam -= jobMap[jobName].jobRam;\\r\\n    if (!answ[svrName]) answ[svrName] = {};\\r\\n    if (!answ[svrName][jobName]) answ[svrName][jobName] = 1;\\r\\n    else answ[svrName][jobName]++;\\r\\n  }\\r\\n\\r\\n  /** @type {{svrName: string, script: Script}[]} */\\r\\n  const list = [];\\r\\n  for (const [svrName, many] of Object.entries(answ)) {\\r\\n    for (const [name, n] of Object.entries(many)) {\\r\\n      list.push({ svrName, script: { ...scriptMap[name], n } })\\r\\n    }\\r\\n  }\\r\\n  return list;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {string} hex\\r\\n * @return {RGB}\\r\\n*/\\r\\nexport function hexToRgb(hex) {\\r\\n  if (hex.length == 4) {\\r\\n    return {\\r\\n      r: parseInt(hex.charAt(1).repeat(2), 16),\\r\\n      g: parseInt(hex.charAt(2).repeat(2), 16),\\r\\n      b: parseInt(hex.charAt(3).repeat(2), 16),\\r\\n    };\\r\\n  }\\r\\n  else if (hex.length == 7) {\\r\\n    return {\\r\\n      r: parseInt(hex.substring(1, 3), 16),\\r\\n      g: parseInt(hex.substring(3, 5), 16),\\r\\n      b: parseInt(hex.substring(5, 7), 16),\\r\\n    };\\r\\n  }\\r\\n  throw 'Wrong HEX color format!';\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {RGB} rgb\\r\\n * @return {number}\\r\\n*/\\r\\nexport function rgbToGray(rgb) { return 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b; }\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function updateTree(ns) {\\r\\n  printHTML('Updating the Tree;');\\r\\n  /** @type {Tree} */\\r\\n  const tree = { 'home': {} };\\r\\n  let more = ['home'];\\r\\n  while (more.length != 0) {\\r\\n    let host = more.shift();\\r\\n    /** @type {string[]} */\\r\\n    let next = [];\\r\\n    let scan = ns.scan(host);\\r\\n    for (let node of scan) {\\r\\n      if (!tree.hasOwnProperty(node)) {\\r\\n        tree[node] = { last: host };\\r\\n        next.push(node);\\r\\n        if (!more.includes(node)) {\\r\\n          more.push(node);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    tree[host].next = next;\\r\\n  }\\r\\n  extra.tree = tree;\\r\\n}\\r\\n\\r\\nexport function goto(host) {\\r\\n  let cmd = '';\\r\\n  while (host != 'home') {\\r\\n    cmd = `connect ${host};${cmd}`;\\r\\n    host = extra.tree[host].last;\\r\\n  }\\r\\n  execRaw(`home;${cmd}`);\\r\\n}\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport function hackAll(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  for (let host in extra.tree) {\\r\\n    ns.scp(ns.ls('home', '.js'), host, 'home');\\r\\n    if (host == 'home' || extra.hacked[host]) continue;\\r\\n    if (ns.hasRootAccess(host)) {\\r\\n      extra.hacked[host] = {};\\r\\n    } else if (sudo(ns, host)) {\\r\\n      printHTML(`<span style='color:${theme.success}'>Gain root access of ${host}.</span>`);\\r\\n      extra.hacked[host] = {};\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @param {string} host\\r\\n * @param {boolean} act\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function sudo(ns, host, act = true) {\\r\\n  if (ns.hasRootAccess(host)) return true;\\r\\n  const P = [\\r\\n    { file: 'BruteSSH.exe', port: 'sshPortOpen', prog: ns.brutessh },\\r\\n    { file: 'FTPCrack.exe', port: 'ftpPortOpen', prog: ns.ftpcrack },\\r\\n    { file: 'relaySMTP.exe', port: 'smtpPortOpen', prog: ns.relaysmtp },\\r\\n    { file: 'HTTPWorm.exe', port: 'httpPortOpen', prog: ns.httpworm },\\r\\n    { file: 'SQLInject.exe', port: 'sqlPortOpen', prog: ns.sqlinject }\\r\\n  ];\\r\\n  const s = ns.getServer(host);\\r\\n  for (const { file, port, prog } of P.slice(0, s.numOpenPortsRequired)) {\\r\\n    if (!s[port]) {\\r\\n      if (ns.fileExists(file, 'home')) {\\r\\n        if (act) prog(host);\\r\\n      } else {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  if (act) { ns.nuke(host); }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {NS} ns\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function tryUpgradeHacknetNode(ns) {\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hn = ns.hacknet;\\r\\n  let money = ns.getServerMoneyAvailable('home');\\r\\n  let num_node = hn.numNodes();\\r\\n  if (money >= hn.getPurchaseNodeCost()) {\\r\\n    hn.purchaseNode();\\r\\n    // printHTML(`<span style='color:${theme.money}'>+ node${num_node}</span>`);\\r\\n    return true;\\r\\n  }\\r\\n  for (let i = 0; i < num_node; i++) {\\r\\n    if (money >= hn.getLevelUpgradeCost(i, 1)) {\\r\\n      hn.upgradeLevel(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} level</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getRamUpgradeCost(i, 1)) {\\r\\n      hn.upgradeRam(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} ram</span>`);\\r\\n      return true;\\r\\n    }\\r\\n    if (money >= hn.getCoreUpgradeCost(i, 1)) {\\r\\n      hn.upgradeCore(i, 1);\\r\\n      // printHTML(`<span style='color:${theme.money}'>↑ node${num_node} core</span>`);\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} n\\r\\n * @return {string}\\r\\n */\\r\\nexport function money(n) {\\r\\n  if (n < 1000) return `$${n.toFixed(2)}`;\\r\\n  if (n < 1000000) return `$${(n / 1000).toFixed(2)}k`;\\r\\n  if (n < 1000000000) return `$${(n / 1000000).toFixed(2)}m`\\r\\n  if (n < 1000000000000) return `$${(n / 1000000000).toFixed(2)}b`\\r\\n  return n.toString();\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} a\\r\\n * @param {number} b\\r\\n */\\r\\nexport function gcd(a, b) {\\r\\n  while (b) {\\r\\n    var t = b;\\r\\n    b = a % b;\\r\\n    a = t;\\r\\n  }\\r\\n  return a;\\r\\n}\\r\\n\\r\\n/** @type {()=>any[]} */\\r\\nexport const getOutput = extra.getOutput;\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const setInput = extra.input;\\r\\n\\r\\n/** @type {()=>any} */\\r\\nexport const popOutput = extra.popOutput;\\r\\n\\r\\n/** @type {(node:import('react').ReactElement)=>void} */\\r\\nexport const printNode = extra.printRaw;\\r\\n\\r\\n/** @type {(html:string)=>void} */\\r\\nexport const printHTML = (html) => { extra.printRaw(React.createElement('div', { style: { margin: 0 }, dangerouslySetInnerHTML: { __html: html } })); };\\r\\n\\r\\n/** @type {(str:string)=>void} */\\r\\nexport const execRaw = extra.execRaw;\",\"filename\":\"tool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.65,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":11117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateTree, money, popOutput, printNode, sudo, goto } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  popOutput();\\r\\n  updateTree(ns);\\r\\n  const theme = ns.ui.getTheme();\\r\\n  const hlv = ns.getHackingLevel();\\r\\n\\r\\n  /** \\r\\n   * @param {string} host\\r\\n   * @param {string} pref\\r\\n   * @return {import('react').ReactNode}\\r\\n  */\\r\\n  function createTree(host, pref = '') {\\r\\n    const root = ns.hasRootAccess(host);\\r\\n    const canRoot = sudo(ns, host, false)\\r\\n    const shlv = ns.getServerRequiredHackingLevel(host);\\r\\n    const item = [\\r\\n      pref,\\r\\n      React.createElement('span', {\\r\\n        style: { color: root ? theme.success : (canRoot ? theme.primary : theme.secondary) },\\r\\n        onClick: () => goto(host)\\r\\n      }, host),\\r\\n      canRoot && React.createElement('span', { style: { color: theme.secondary } }, ` ${ns.getServerMaxRam(host)}G`),\\r\\n      hlv < shlv && canRoot && React.createElement('span', { style: { color: theme.error } }, ` Lv.${shlv}`),\\r\\n      hlv >= shlv && canRoot && host != 'home' && React.createElement('span', { style: { color: theme.money } }, ` ${money(ns.getServerMaxMoney(host))}`),\\r\\n      '\\\\n'];\\r\\n    pref = pref.replaceAll('├─', '│ ').replaceAll('└─', '  ');\\r\\n    const next = extra.tree[host].next;\\r\\n    if (next.length > 0) {\\r\\n      for (let node of next.slice(0, -1)) {\\r\\n        item.push(createTree(node, pref + '├─'));\\r\\n      }\\r\\n      item.push(createTree(next[next.length - 1], pref + '└─'));\\r\\n    }\\r\\n    return item;\\r\\n  }\\r\\n\\r\\n  printNode(React.createElement('p', { style: { margin: 0, userSelect: 'none' } }, createTree('home')));\\r\\n}\\r\\n\",\"filename\":\"tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.weaken(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"weaker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[1]);\\r\\n  if (ns.args[2]) await ns.asleep(ns.args[2]);\\r\\n}\",\"filename\":\"hacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { printHTML } from './tool';\\r\\n\\r\\n/** @param {import('./tool').NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let html = '';\\r\\n  for (const [k, v] of Object.entries(ns.getServer(ns.args[0]))) {\\r\\n    html += `${k.toString()}: ${v.toString()}\\\\n`;\\r\\n  }\\r\\n  printHTML(html);\\r\\n}\",\"filename\":\"info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":34298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"95.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"19.7.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":90.58333333333489}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":616.4385128205383}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"main\":\"run main.js\",\"tree\":\"run tree.js\",\"goto\":\"run goto.js\",\"test\":\"run test.js\",\"theme\":\"run theme.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.2,\"fontFamily\":\"Consolas\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"26","AllGangsSave":"","LastExportBonus":"1667377836496","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}